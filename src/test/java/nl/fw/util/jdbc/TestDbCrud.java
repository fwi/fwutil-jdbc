package nl.fw.util.jdbc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.sql.ResultSet;
import java.util.HashSet;
import java.util.Set;

import nl.fw.util.jdbc.DbConnUtil;
import nl.fw.util.jdbc.hikari.DbConnHik;
import nl.fw.util.jdbc.hikari.HikPool;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Opens an in-memory database and performs CRUD operations on it
 * using inline plain sql statements.
 * @author fred
 *
 */
public class TestDbCrud {
	
	private static final Logger log = LoggerFactory.getLogger(TestDbCrud.class);
	private static HikPool dbPool = null;
	
	@BeforeClass
	public static void openDb() throws Exception {
		
		dbPool = new HikPool();
		dbPool.open(dbPool.loadDbProps("db-test.properties", "db.test."));
		log.debug("Database opened.");
	}
	
	@AfterClass
	public static void closeDb() {
		
		if (dbPool != null) {
			dbPool.close();
		}
		log.debug("Database closed.");
	}
	
	private int recordId, recordId2, recordId3;
	
	@Test
	public void dbCrud() throws Exception {
		
		log.debug("Creating test table.");
		DbConnHik dbc = new DbConnHik(dbPool);
		assertNoConnectionsInUse();
		try {
			dbc.createStatement().executeUpdate("create table table_test (id bigint generated by default as identity (start with 1), name varchar(255), primary key (id))");
			int i = dbc.getResultCount();
			log.debug("Test table created ({})", i);
			dbc.commitAndClose();
		} finally {
			dbc.rollbackAndClose();
		}
		assertNoConnectionsInUse();
		log.debug("insert a record");
		try {
			dbc.prepareStatement("insert into table_test (name) values (?)", true);
			dbc.getPreparedStatement().setString(1, "Marvin");
			ResultSet rs = dbc.executeUpdate().getResultSet();
			assertTrue("Have a generated key.", rs.next());
			recordId = rs.getInt(1);
			dbc.commitAndClose();
			log.debug("Created record {}", recordId);
		} finally {
			dbc.rollbackAndClose();
		}
		log.debug("list all records");
		try {
			dbc.prepareStatement("select * from table_test");
			ResultSet rs = dbc.executeQuery().getResultSet();
			rs.next();
			assertEquals("Record ID", recordId, rs.getLong("id"));
			assertEquals("Name", "Marvin", rs.getString("name"));
			assertFalse("No more records.", rs.next());
		} finally {
			dbc.close();
		}
		assertNoConnectionsInUse();
		log.debug("find by ID");
		try {
			dbc.prepareStatement("select name from table_test where id = ?");
			dbc.getPreparedStatement().setLong(1, recordId);
			ResultSet rs = dbc.executeQuery().getResultSet();
			rs.next();
			assertEquals("Name", "Marvin", rs.getString("name"));
			assertFalse("No more records.", rs.next());
		} finally {
			dbc.close();
		}
		log.debug("update name");
		try {
			dbc.prepareStatement("update table_test set name = ? where id = ?");
			dbc.getPreparedStatement().setString(1, "Marvin the Martian");
			dbc.getPreparedStatement().setLong(2, recordId);
			assertEquals("One record updated.", 1, dbc.executeUpdate().getResultCount());
			dbc.commitAndClose();
		} finally {
			dbc.rollbackAndClose();
		}
		log.debug("verify updated name");
		try {
			dbc.prepareStatement("select name from table_test where id = ?");
			dbc.getPreparedStatement().setLong(1, recordId);
			ResultSet rs = dbc.executeQuery().getResultSet();
			rs.next();
			assertEquals("Name", "Marvin the Martian", rs.getString("name"));
			assertFalse("No more records.", rs.next());
		} finally {
			dbc.close();
		}
		log.debug("insert second and third record");
		try {
			dbc.prepareStatement("insert into table_test (name) values (?)", true);
			dbc.getPreparedStatement().setString(1, "Bugs Bunny");
			ResultSet rs = dbc.executeUpdate().getResultSet();
			assertTrue("Have a generated key.", rs.next());
			recordId2 = rs.getInt(1);
			dbc.getPreparedStatement().setString(1, "Daffy Duck");
			ResultSet rs2 = dbc.executeUpdate().getResultSet();
			// Even if DbConn does not close the previous result-set,
			// it is closed by the HSQL JDBC driver-implementation.
			// That makes this test non-conclusive for the moment ...
			assertTrue("Verify first result-set is closed", rs.isClosed());
			rs2.next();
			recordId3 = rs2.getInt(1);
			dbc.commitAndClose();
			log.debug("Created record {}", recordId2);
			assertTrue("Verify second result-set is closed", rs2.isClosed());
		} finally {
			dbc.rollbackAndClose();
		}
		log.debug("Select using the 'in' sql operator and DbConnUtil utility methods");
		try {
			String sql = "select name from table_test where id in (%s)";
			sql = String.format(sql, DbConnUtil.preparePlaceHolders(2));
			dbc.prepareStatement(sql);
			DbConnUtil.setValues(dbc.getPreparedStatement(), recordId, recordId2);
			ResultSet rs = dbc.executeQuery().getResultSet();
			Set<String> names = new HashSet<String>();
			while (rs.next()) {
				names.add(rs.getString("name"));
			}
			dbc.commitAndClose();
			log.debug("Names retrieved with in-operator: " + names);
			assertEquals("Retrieved 2 names", 2, names.size());
		} finally {
			dbc.rollbackAndClose();
		}
		log.debug("fail an update");
		try {
			dbc.prepareStatement("update table_test set name = ? where id = ?");
			dbc.getPreparedStatement().setString(1, "Melvin");
			dbc.getPreparedStatement().setLong(2, recordId2);
			assertEquals("One record about to be updated.", 1, dbc.executeUpdate().getResultCount());
			dbc.rollbackAndClose();
		} finally {
			dbc.rollbackAndClose();
		}
		log.debug("verify update failed");
		try {
			dbc.prepareStatement("select name from table_test where id = ?");
			dbc.getPreparedStatement().setLong(1, recordId2);
			ResultSet rs = dbc.executeQuery().getResultSet();
			rs.next();
			assertEquals("Name", "Bugs Bunny", rs.getString("name"));
			// verify closing of result-sets, see also "insert second and third record" above
			dbc.getPreparedStatement().setLong(1, recordId3);
			ResultSet rs2 = dbc.executeQuery().getResultSet();
			assertTrue("Verify first result-set is closed", rs.isClosed());
			rs2.next();
			assertEquals("Name", "Daffy Duck", rs2.getString("name"));
		} finally {
			dbc.close();
		}
		log.debug("delete first and third record by ID");
		try {
			dbc.prepareStatement("delete from table_test where id=?");
			dbc.getPreparedStatement().setLong(1, recordId);
			assertEquals("One record deleted.", 1, dbc.executeUpdate().getResultCount());
			dbc.getPreparedStatement().setLong(1, recordId3);
			assertEquals("One record deleted.", 1, dbc.executeUpdate().getResultCount());
			dbc.commitAndClose();
		} finally {
			dbc.rollbackAndClose();
		}
		log.debug("verify delete of first and third record");
		try {
			dbc.prepareStatement("select * from table_test order by id");
			ResultSet rs = dbc.executeQuery().getResultSet();
			rs.next();
			assertEquals("Name", "Bugs Bunny", rs.getString("name"));
			assertFalse(rs.next());
		} finally {
			dbc.close();
		}
		
		// TODO: test callable procedure/function.
	}
	
	private void assertNoConnectionsInUse() {
		
		assertEquals("No connections in use", 0, dbPool.getJmx().getActiveConnections());
	}

}
